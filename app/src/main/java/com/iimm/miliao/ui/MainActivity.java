package com.iimm.miliao.ui;import android.annotation.SuppressLint;import android.app.Activity;import android.app.ActivityManager;import android.app.Dialog;import android.app.NotificationManager;import android.content.BroadcastReceiver;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.IntentFilter;import android.content.pm.ActivityInfo;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.content.res.ColorStateList;import android.content.res.Configuration;import android.graphics.drawable.Drawable;import android.net.ConnectivityManager;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.os.CountDownTimer;import android.os.Handler;import android.os.IBinder;import android.os.Message;import android.os.Process;import android.provider.Settings;import android.support.annotation.RequiresApi;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentManager;import android.support.v4.app.FragmentTransaction;import android.support.v4.content.FileProvider;import android.support.v4.graphics.drawable.DrawableCompat;import android.text.TextUtils;import android.util.Log;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.View;import android.view.inputmethod.InputMethodManager;import android.widget.LinearLayout;import android.widget.ProgressBar;import android.widget.RadioButton;import android.widget.RadioGroup;import android.widget.TextView;import com.alibaba.fastjson.JSON;import com.bumptech.glide.Glide;import com.bumptech.glide.load.engine.DiskCacheStrategy;import com.bumptech.glide.load.resource.drawable.GlideDrawable;import com.bumptech.glide.request.animation.GlideAnimation;import com.bumptech.glide.request.target.SimpleTarget;import com.coloros.mcssdk.PushManager;import com.example.qrcode.Constant;import com.example.qrcode.ScannerActivity;import com.google.android.gms.common.ConnectionResult;import com.google.android.gms.common.GoogleApiAvailability;import com.iimm.miliao.AppConfig;import com.iimm.miliao.AppConstant;import com.iimm.miliao.BuildConfig;import com.iimm.miliao.MyApplication;import com.iimm.miliao.R;import com.iimm.miliao.Reporter;import com.iimm.miliao.adapter.MessageContactEvent;import com.iimm.miliao.adapter.MessageEventBG;import com.iimm.miliao.adapter.MessageEventHongdian;import com.iimm.miliao.adapter.MessageLogin;import com.iimm.miliao.adapter.MessageSendChat;import com.iimm.miliao.bean.AttentionUser;import com.iimm.miliao.bean.Contact;import com.iimm.miliao.bean.Contacts;import com.iimm.miliao.bean.EventBusMsg;import com.iimm.miliao.bean.EventCreateGroupFriend;import com.iimm.miliao.bean.EventSendVerifyMsg;import com.iimm.miliao.bean.Friend;import com.iimm.miliao.bean.MonitorBean;import com.iimm.miliao.bean.RoomMember;import com.iimm.miliao.bean.UploadingFile;import com.iimm.miliao.bean.User;import com.iimm.miliao.bean.VersionInfo;import com.iimm.miliao.bean.message.ChatMessage;import com.iimm.miliao.bean.message.MucRoom;import com.iimm.miliao.bean.message.MucRoomMember;import com.iimm.miliao.broadcast.MsgBroadcast;import com.iimm.miliao.broadcast.MucgroupUpdateUtil;import com.iimm.miliao.broadcast.OtherBroadcast;import com.iimm.miliao.broadcast.TimeChangeReceiver;import com.iimm.miliao.broadcast.UpdateUnReadReceiver;import com.iimm.miliao.call.AudioOrVideoController;import com.iimm.miliao.call.Jitsi_connecting_second;import com.iimm.miliao.call.MessageEventCancelOrHangUp;import com.iimm.miliao.call.MessageEventInitiateMeeting;import com.iimm.miliao.db.InternationalizationHelper;import com.iimm.miliao.db.dao.ChatMessageDao;import com.iimm.miliao.db.dao.ContactDao;import com.iimm.miliao.db.dao.FriendDao;import com.iimm.miliao.db.dao.MyZanDao;import com.iimm.miliao.db.dao.NewFriendDao;import com.iimm.miliao.db.dao.OnCompleteListener2;import com.iimm.miliao.db.dao.OnCompleteUpdateListener;import com.iimm.miliao.db.dao.RoomMemberDao;import com.iimm.miliao.db.dao.UploadingFileDao;import com.iimm.miliao.db.dao.UserDao;import com.iimm.miliao.downloader.UpdateManger;import com.iimm.miliao.fragment.AddressBookFragment;import com.iimm.miliao.fragment.DiscoverFragment;import com.iimm.miliao.fragment.DiyFragment2;import com.iimm.miliao.fragment.MainFragment;import com.iimm.miliao.fragment.MeFragment;import com.iimm.miliao.fragment.MessageFragment;import com.iimm.miliao.fragment.SquareFragment;import com.iimm.miliao.helper.DialogHelper;import com.iimm.miliao.helper.LoginHelper;import com.iimm.miliao.map.MapHelper;import com.iimm.miliao.pay.PaymentReceiptMoneyActivity;import com.iimm.miliao.pay.ReceiptPayMoneyActivity;import com.iimm.miliao.push.google.FirebaseMessageService;import com.iimm.miliao.push.huawei.HuaweiClient;import com.iimm.miliao.push.meizu.MeizuPushMsgReceiver;import com.iimm.miliao.push.oppo.OppoPushMessageService;import com.iimm.miliao.push.vivo.VivoPushMessageReceiver;import com.iimm.miliao.sp.UserSp;import com.iimm.miliao.ui.account.LoginActivity;import com.iimm.miliao.ui.account.PublicAccountScannerActivity;import com.iimm.miliao.ui.base.ActivityStack;import com.iimm.miliao.ui.base.BaseActivity;import com.iimm.miliao.ui.base.CoreManager;import com.iimm.miliao.ui.lock.DeviceLockActivity;import com.iimm.miliao.ui.lock.DeviceLockHelper;import com.iimm.miliao.ui.message.MucChatActivity;import com.iimm.miliao.ui.other.BasicInfoActivity;import com.iimm.miliao.ui.tool.MainAlertWebViewActivity;import com.iimm.miliao.ui.tool.WebViewActivity;import com.iimm.miliao.util.AppExecutors;import com.iimm.miliao.util.AppUtils;import com.iimm.miliao.util.AsyncUtils;import com.iimm.miliao.util.CommonalityTools;import com.iimm.miliao.util.Constants;import com.iimm.miliao.util.ContactsUtil;import com.iimm.miliao.util.DeviceInfoUtil;import com.iimm.miliao.util.DisplayUtil;import com.iimm.miliao.util.FileUtil;import com.iimm.miliao.util.HttpUtil;import com.iimm.miliao.util.JsonUtils;import com.iimm.miliao.util.LocaleHelper;import com.iimm.miliao.util.Md5Util;import com.iimm.miliao.util.OBSUtils;import com.iimm.miliao.util.PreferenceUtils;import com.iimm.miliao.util.RegexUtils;import com.iimm.miliao.util.SkinUtils;import com.iimm.miliao.util.TimeUtils;import com.iimm.miliao.util.ToastUtil;import com.iimm.miliao.util.ToolUtils;import com.iimm.miliao.util.UiUtils;import com.iimm.miliao.util.log.LogUtils;import com.iimm.miliao.util.permission.AndPermissionUtils;import com.iimm.miliao.util.permission.OnPermissionClickListener;import com.iimm.miliao.util.permission.PermissionDialog;import com.iimm.miliao.view.SelectionFrame;import com.iimm.miliao.view.SelectionLongFrame;import com.iimm.miliao.view.VerifyDialog;import com.iimm.miliao.view.window.MainWindowShowService;import com.iimm.miliao.view.window.WindowUtil;import com.iimm.miliao.xmpp.ListenerManager;import com.iimm.miliao.xmpp.XmppConnectionImpl;import com.iimm.miliao.xmpp.spare.SpareConnectionHelper;import com.iimm.miliao.xmpp.util.ImHelper;import com.xiaomi.mipush.sdk.MiPushClient;import com.xuan.xuanhttplibrary.okhttp.HttpUtils;import com.xuan.xuanhttplibrary.okhttp.callback.BaseCallback;import com.xuan.xuanhttplibrary.okhttp.callback.ListCallback;import com.xuan.xuanhttplibrary.okhttp.result.ArrayResult;import com.xuan.xuanhttplibrary.okhttp.result.ObjectResult;import com.xuan.xuanhttplibrary.okhttp.result.Result;import java.io.File;import java.io.FileOutputStream;import java.io.InputStream;import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.List;import java.util.Map;import de.greenrobot.event.EventBus;import de.greenrobot.event.Subscribe;import de.greenrobot.event.ThreadMode;import fm.jiecao.jcvideoplayer_lib.JCVideoPlayer;import me.leolin.shortcutbadger.ShortcutBadger;import okhttp3.Call;import okhttp3.OkHttpClient;import okhttp3.Request;import okhttp3.Response;/** * 主界面 */public class MainActivity extends BaseActivity {    // 小米推送    public static final String APP_ID = BuildConfig.XIAOMI_APP_ID;    public static final String APP_KEY = BuildConfig.XIAOMI_APP_KEY;    /* UserCheck */    private static final int MSG_USER_CHECK = 0x1;    private static final int RETRY_CHECK_DELAY_MAX = 30000;// 为成功的情况下，最长30s检测一次    // 是否重新走initView方法    // 当切换语言、修改皮肤之后，将该状态置为true    public static boolean isInitView = false;    /**     * 更新我的群组     */    Handler mHandler = new Handler();    private UpdateUnReadReceiver mUpdateUnReadReceiver = null;    private TimeChangeReceiver timeChangeReceiver = null;    private ActivityManager mActivityManager;    // ╔═══════════════════════════════界面组件══════════════════════════════╗    // ╚═══════════════════════════════界面组件══════════════════════════════╝    private int mLastFragmentId;// 当前界面    private RadioGroup mRadioGroup;    private RadioButton mRbTab1, mRbTab2, mRbTab3, mRbTab4, mRbTabDiy;    private TextView mTvMessageNum;// 显示消息界面未读数量    private TextView mTvNewFriendNum;// 显示通讯录消息未读数量    private TextView mTvCircleNum;// 显示朋友圈未读数量    private int numMessage = 0;// 当前未读消息数量    private int numCircle = 0; // 当前朋友圈未读数量    private String mUserId;// 当前登陆的 UserID    private My_BroadcastReceiver my_broadcastReceiver;    private int mCurrtTabId;    private boolean isCreate;    private int mRetryCheckDelay = 0;    private LinearLayout mDiyLL;    private Handler mUserCheckHander = new Handler(new Handler.Callback() {        @Override        public boolean handleMessage(Message msg) {            Log.d(TAG, "handleMessage() called with: msg = [" + msg + "]");            if (msg.what == MSG_USER_CHECK) {                if (mRetryCheckDelay < RETRY_CHECK_DELAY_MAX) {                    mRetryCheckDelay += 5000;                }                mUserCheckHander.removeMessages(RETRY_CHECK_DELAY_MAX);                doUserCheck();            }            return false;        }    });    /**     * 在其他设备登录了，挤下线     */    private boolean isConflict;    public static void start(Context ctx) {        Intent intent = new Intent(ctx, MainActivity.class);        ctx.startActivity(intent);    }    /**     * 发起二维码扫描，     * 仅供MainActivity下属Fragment调用，     */    public static void requestQrCodeScan(Activity ctx) {        AndPermissionUtils.scanIt(ctx, new OnPermissionClickListener() {            @Override            public void onSuccess() {                Intent intent = new Intent(ctx, ScannerActivity.class);                // 设置扫码框的宽                intent.putExtra(Constant.EXTRA_SCANNER_FRAME_WIDTH, DisplayUtil.dip2px(ctx, 200));                // 设置扫码框的高                intent.putExtra(Constant.EXTRA_SCANNER_FRAME_HEIGHT, DisplayUtil.dip2px(ctx, 200));                // 设置扫码框距顶部的位置                intent.putExtra(Constant.EXTRA_SCANNER_FRAME_TOP_PADDING, DisplayUtil.dip2px(ctx, 100));                // 可以从相册获取                intent.putExtra(Constant.EXTRA_IS_ENABLE_SCAN_FROM_PIC, true);                ctx.startActivityForResult(intent, 888);            }            @Override            public void onFailure(List<String> data) {                ToastUtil.showToast(ctx, ctx.getString(R.string.please_turn_on_the_camera_and_its_storage_permissions));            }        });    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        EventBus.getDefault().register(this);        OBSUtils.init(this, coreManager, new Handler());        initLog();        /*         * 判断是否是群二维码分享进入         * */        if (!TextUtils.isEmpty(AppConfig.EXTERNAL_TUNING_UP)) {            isSupportForwarded(CommonalityTools.getValueByName(AppConfig.EXTERNAL_TUNING_UP, "roomId"));        }        // 部分设备莫名重启MainActivity导致语言混乱，        // 治标不治本，没找到MainActivity重启的原因，        initLanguage();        checkTime();        mUserId = coreManager.getSelf().getUserId();        initView();// 初始化控件        initBroadcast();// 初始化广播        initOther();// 初始化第三方        initDatas();// 初始化一些数据        // 初始化音视频Control        AudioOrVideoController.init(mContext, coreManager);        AsyncUtils.doAsync(this, mainActivityAsyncContext -> {            // 获取app关闭之前还在上传的消息，将他们的发送状态置为失败            List<UploadingFile> uploadingFiles = UploadingFileDao.getInstance().getAllUploadingFiles(coreManager.getSelf().getUserId());            for (int i = uploadingFiles.size() - 1; i >= 0; i--) {                ChatMessageDao.getInstance().updateMessageState(coreManager.getSelf().getUserId(), uploadingFiles.get(i).getToUserId(),                        uploadingFiles.get(i).getMsgId(), Constants.MESSAGE_SEND_FAILED);            }        });        EventBus.getDefault().post(new MessageLogin());        // 设备锁，        showDeviceLock();        if (!coreManager.getConfig().disableLocationServer) {            initMap();        }        MyApplication.applicationHandler.post(new Runnable() {            @Override            public void run() {                getNewVersion();                downloadUserInfo();            }        });        if (!TextUtils.isEmpty(CoreManager.requireSelfStatus(MyApplication.getContext()).accessToken) && Constants.SUPPORT_SECOND_CHANNEL) {            SpareConnectionHelper.getInstance().connect();        }    }    private void initMap() {        // 中国大陆只能使用百度，        // 墙外且有谷歌框架才能使用谷歌地图，        MapHelper mapHelper = MapHelper.getInstance(MapHelper.MapType.BAIDU);        if (mapHelper == null) {            return;        }        mapHelper.isInChina(new MapHelper.OnSuccessListener<Boolean>() {            @Override            public void onSuccess(Boolean aBoolean) {                if (aBoolean) {                    MapHelper.setMapType(MapHelper.MapType.BAIDU);                } else {                    if (googleAvailable()) {                        MapHelper.setMapType(MapHelper.MapType.GOOGLE);                    } else {                        MapHelper.setMapType(MapHelper.MapType.BAIDU);                    }                }            }        }, new MapHelper.OnErrorListener() {            @Override            public void onError(Throwable t) {                t.printStackTrace();                if (googleAvailable()) {                    MapHelper.setMapType(MapHelper.MapType.GOOGLE);                } else {                    MapHelper.setMapType(MapHelper.MapType.BAIDU);                }            }        });    }    public void checkTime() {        Map<String, String> params = new HashMap<>();        params.put("access_token", coreManager.getSelfStatus().accessToken);        HttpUtils.get().url(coreManager.getConfig().GET_CURRENT_TIME)                .params(params)                .build()                .execute(new BaseCallback<Void>(Void.class) {                    @Override                    public void onResponse(ObjectResult<Void> result) {                        // 误差比config接口大，可能是主页线程做其他操作导致的，                        // 和ios统一，进入主页时校准时间，                        TimeUtils.responseTime(result.getCurrentTime());                    }                    @Override                    public void onError(Call call, Exception e) {                        // 不需要提示，                        Log.e("TimeUtils", "校准时间失败", e);                    }                });    }    private void initLog() {        String dir = FileUtil.getSaveDirectory("IMLogs");        LogUtils.setLogDir(dir);        LogUtils.setLogLevel(LogUtils.LogLevel.WARN);    }    private void initLanguage() {        // 应用程序里设置的语言，否则程序杀死后重启又会是系统语言，        LocaleHelper.setLocale(this, LocaleHelper.getLanguage(this));    }    @Override    protected void onNewIntent(Intent intent) {        super.onNewIntent(intent);        Log.e(TAG, "onNewIntent1");        if (isInitView) {            Log.e(TAG, "onNewIntent2");            FragmentManager fm = getSupportFragmentManager();            List<Fragment> lf = fm.getFragments();            for (Fragment f : lf) {                fm.beginTransaction().remove(f).commitNowAllowingStateLoss();            }            initView();        }        MainActivity.isInitView = false;    }    private void initDatas() {        // 检查用户的状态，做不同的初始化工作        User loginUser = coreManager.getSelf();        if (!LoginHelper.isUserValidation(loginUser)) {            LoginHelper.prepareUser(this, coreManager);        }        if (!MyApplication.getInstance().mUserStatusChecked) {// 用户状态没有检测，那么开始检测            mUserCheckHander.sendEmptyMessageDelayed(MSG_USER_CHECK, mRetryCheckDelay);        } else {            if (MyApplication.getInstance().mUserStatus == LoginHelper.STATUS_USER_VALIDATION) {                LoginHelper.broadcastLogin(this);            } else {// 重新检测                MyApplication.getInstance().mUserStatusChecked = false;                mUserCheckHander.sendEmptyMessageDelayed(MSG_USER_CHECK, mRetryCheckDelay);            }        }        mUserId = loginUser.getUserId();        FriendDao.getInstance().checkSystemFriend(mUserId); // 检查 两个公众号        // 更新所有未读的信息        updateNumData();    }    private void initBroadcast() {        // 注册未读消息更新广播        IntentFilter filter = new IntentFilter();        filter.addAction(MsgBroadcast.ACTION_MSG_NUM_UPDATE);        filter.addAction(MsgBroadcast.ACTION_MSG_NUM_UPDATE_NEW_FRIEND);        filter.addAction(MsgBroadcast.ACTION_MSG_NUM_RESET);        mUpdateUnReadReceiver = new UpdateUnReadReceiver(this);        registerReceiver(mUpdateUnReadReceiver, filter);        // 刷新评论的广播和 关闭主界面的，用于切换语言，更改皮肤用        filter = new IntentFilter();        // 当存在阅后即焚文字类型的消息时，当计时器计时结束但聊天界面已经销毁时(即聊天界面收不到该广播，消息也不会销毁)，代替销毁        filter.addAction(Constants.UPDATE_ROOM);        filter.addAction(Constants.PING_FAILED);        filter.addAction(Constants.CLOSED_ON_ERROR_END_DOCUMENT);        filter.addAction(OtherBroadcast.SYNC_CLEAN_CHAT_HISTORY);        filter.addAction(OtherBroadcast.SEND_MULTI_NOTIFY);  // 群发消息结束        filter.addAction(OtherBroadcast.FINISH_MAIN);        my_broadcastReceiver = new My_BroadcastReceiver();        registerReceiver(my_broadcastReceiver, filter);        // 监听系统时间设置，        filter = new IntentFilter();        filter.addAction(Intent.ACTION_TIME_CHANGED);        filter.addAction(Intent.ACTION_DATE_CHANGED);        filter.addAction(Intent.ACTION_TIMEZONE_CHANGED);        timeChangeReceiver = new TimeChangeReceiver();        registerReceiver(timeChangeReceiver, filter);        initNetWorkStatusReceiver();    }    /*********************     * 网络连接状态     ***************/    private void initNetWorkStatusReceiver() {        // 获取程序启动时的网络状态        // 注册网络监听广播        IntentFilter intentFilter = new IntentFilter();        intentFilter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);        intentFilter.addAction(Constants.CLOSED_ON_ERROR_NORMAL);        mContext.registerReceiver(mNetWorkChangeReceiver, intentFilter);    }    private BroadcastReceiver mNetWorkChangeReceiver = new BroadcastReceiver() {        @Override        public void onReceive(Context context, Intent intent) {            String action = intent.getAction();            if (TextUtils.isEmpty(action)) {                return;            }            LogUtils.e(TAG, "监测到网络改变");            LogUtils.i(TAG, "onReceive 网络是否连接: " + HttpUtil.isGprsOrWifiConnected(MyApplication.getInstance()));            LogUtils.i(TAG, "onReceive 网络是否可用: " + HttpUtil.isNetWorkAvailable());            if (HttpUtil.isNetWorkAvailable()) {                boolean result = ImHelper.checkXmppAuthenticated();                LogUtils.i(TAG, "onReceive 消息服务是否连接: " + result);            }            MyApplication.applicationHandler.postDelayed(new Runnable() {                @Override                public void run() {                    //boolean result = ImHelper.checkXmppAuthenticated();                    //Log.i(TAG, "onReceive run(): "+result);                }            }, 5 * 1000);        }    };    private void initOther() {        Log.d(TAG, "initOther() called");        // 服务器端是根据最后调用的上传推送ID接口决定使用什么推送，        // 也就是在这里最后初始化哪个推送就会用哪个推送，        //noinspection ConstantConditions        AsyncUtils.doAsync(this, t -> {            Reporter.post("初始化推送失败", t);        }, mainActivityAsyncContext -> {            if (coreManager.getConfig().enableGoogleFcm && googleAvailable()) {                if (HttpUtil.testGoogle()) {// 拥有谷歌服务且能翻墙 使用谷歌推送                    FirebaseMessageService.init(MainActivity.this);                } else {// 虽然手机内有谷歌服务，但是不能翻墙，还是根据机型判断使用哪种推送                    selectPush();                }            } else {                selectPush();            }        });    }    @SuppressWarnings({"PointlessBooleanExpression", "ConstantConditions"})    private void selectPush() {        // 判断Rom使用推送        if (DeviceInfoUtil.isEmuiRom()) {            Log.e(TAG, "初始化推送: 华为推送，");            // 华为手机 华为推送            HuaweiClient client = new HuaweiClient(this);            client.clientConnect();        } else if (DeviceInfoUtil.isMeizuRom()) {            Log.e(TAG, "初始化推送: 魅族推送，");            MeizuPushMsgReceiver.init(this);        } else if (PushManager.isSupportPush(this)) {            Log.e(TAG, "初始化推送: OPPO推送，");            OppoPushMessageService.init(this);        } else if (DeviceInfoUtil.isVivoRom()) {            Log.e(TAG, "初始化推送: VIVO推送，");            VivoPushMessageReceiver.init(this);        } else if (true || DeviceInfoUtil.isMiuiRom()) {            Log.e(TAG, "初始化推送: 小米推送，");            if (shouldInit()) {                // 小米推送初始化                MiPushClient.registerPush(this, APP_ID, APP_KEY);            }        }    }    private boolean googleAvailable() {        boolean isGoogleAvailability = true;        GoogleApiAvailability googleApiAvailability = GoogleApiAvailability.getInstance();        int resultCode = googleApiAvailability.isGooglePlayServicesAvailable(this);        if (resultCode != ConnectionResult.SUCCESS) {            // 存在谷歌框架但是不可用，            // 官方做法弹个对话框提示，            // if (googleApiAvailability.isUserResolvableError(resultCode)) {            //     googleApiAvailability.getErrorDialog(this, resultCode, 2404).show();            // }            // 当成没有谷歌框架处理，            isGoogleAvailability = false;        }        return isGoogleAvailability;    }    private void doUserCheck() {        Log.d(TAG, "doUserCheck() called");        if (MyApplication.getInstance().mUserStatusChecked) {            return;        }        LoginHelper.checkStatusForUpdate(this, coreManager, new LoginHelper.OnCheckedFailedListener() {            @Override            public void onCheckFailed() {                Log.d(TAG, "onCheckFailed() called");                mUserCheckHander.sendEmptyMessageDelayed(MSG_USER_CHECK, mRetryCheckDelay);            }        });    }    public void cancelUserCheckIfExist() {        Log.d(TAG, "cancelUserCheckIfExist() called");        mUserCheckHander.removeMessages(RETRY_CHECK_DELAY_MAX);    }    @Override    public boolean onKeyDown(int keyCode, KeyEvent event) {        Configuration mConfiguration = this.getResources().getConfiguration(); //获取设置的配置信息        int ori = mConfiguration.orientation; //获取屏幕方向        if (ori == 2) {            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);//强制为竖屏            return true;        } else if (keyCode == KeyEvent.KEYCODE_BACK) {            if (!JCVideoPlayer.backPress()) {                // 调用JCVideoPlayer.backPress()                // true : 当前正在全屏播放视频                // false: 当前未在全屏播放视频                moveTaskToBack(true);            }            return true;        }        return super.onKeyDown(keyCode, event);    }    @Override    protected void onDestroy() {        // XMPP断开连接 必须调用disconnect 否则服务端不能立即检测出当前用户离线 导致推送延迟        if (mUpdateUnReadReceiver != null) {            unregisterReceiver(mUpdateUnReadReceiver);        }        if (my_broadcastReceiver != null) {            unregisterReceiver(my_broadcastReceiver);        }        if (timeChangeReceiver != null) {            unregisterReceiver(timeChangeReceiver);        }        if (mNetWorkChangeReceiver != null) {            unregisterReceiver(mNetWorkChangeReceiver);        }        EventBus.getDefault().unregister(this);        XmppConnectionImpl.getInstance().logoutXmpp();        Glide.get(this).clearMemory();        AppExecutors.getInstance().diskIO().execute(new Runnable() {            @Override            public void run() {                Glide.get(getApplicationContext()).clearDiskCache();            }        });        super.onDestroy();    }    private void initView() {        getSupportActionBar().hide();        mRadioGroup = (RadioGroup) findViewById(R.id.main_rg);        mRbTab1 = (RadioButton) findViewById(R.id.rb_tab_1);        mRbTab2 = (RadioButton) findViewById(R.id.rb_tab_2);        mRbTab3 = (RadioButton) findViewById(R.id.rb_tab_3);        mRbTab4 = (RadioButton) findViewById(R.id.rb_tab_4);        mRbTabDiy = findViewById(R.id.diy_tab);        mDiyLL = findViewById(R.id.diy_ll);        initBottom();        mTvMessageNum = (TextView) findViewById(R.id.main_tab_one_tv);        mTvNewFriendNum = (TextView) findViewById(R.id.main_tab_two_tv);        updateNewFriendMsgNum(0);        mTvCircleNum = (TextView) findViewById(R.id.main_tab_three_tv);        mRadioGroup.setOnCheckedChangeListener((group, checkedId) -> {            hideInput();            if (checkedId > 0 && mCurrtTabId != checkedId) {                mCurrtTabId = checkedId;                changeFragment(checkedId);                if (checkedId == R.id.rb_tab_1) {                    updateNumData();                }                JCVideoPlayer.releaseAllVideos();            }        });        isCreate = false;        //  修改白屏bug        mRbTab1.toggle();        // 改皮肤，        ColorStateList tabColor = SkinUtils.getSkin(this).getTabColorState();        int colorName = SkinUtils.getSkin(this).getColorName();        if (colorName != R.string.skin_simple_white) {            for (RadioButton radioButton : Arrays.asList(mRbTab1, mRbTab2, mRbTabDiy, mRbTab3, mRbTab4)) {  //TODO  多皮肤时 ，SkinUtil 决定哪个显示哪个选中哪个图标                // 图标着色，兼容性解决方案，                Drawable drawable = radioButton.getCompoundDrawables()[1];                if (drawable != null) {                    drawable = DrawableCompat.wrap(drawable);                    DrawableCompat.setTintList(drawable, tabColor);                    // 如果是getDrawable拿到的Drawable不能直接调setCompoundDrawables，没有宽高，                    radioButton.setCompoundDrawablesWithIntrinsicBounds(null, drawable, null, null);                    radioButton.setTextColor(tabColor);                }            }        }        // 检查是否开启通知栏权限        checkNotifyStatus();        // 上传本地通讯录        if (coreManager.getConfig().registerUsername != 1) {            addressBookOperation();        }        //隐藏发现页        if (!Constants.SUPPORT_FIND) {            mRbTab3.setVisibility(View.GONE);            findViewById(R.id.main_tab_three_ll).setVisibility(View.GONE);        }    }    /**     * 根据服务器配置动态显示底部导航     */    private void initBottom() {        if (coreManager.getConfig().getTabBarConfigList != null && !TextUtils.isEmpty(coreManager.getConfig().getTabBarConfigList.getTabBarLinkUrl())) {            mRbTabDiy.setVisibility(View.VISIBLE);            mDiyLL.setVisibility(View.VISIBLE);            mRbTabDiy.setText(coreManager.getConfig().getTabBarConfigList.getTabBarName());            defaultImg();            //启动悬浮申请            if (Constants.SUPPORT_FLOATING_WINDOW){                checkSuspendedWindowPermission();            }        } else {            mRbTabDiy.setVisibility(View.GONE);            mDiyLL.setVisibility(View.GONE);        }    }    /**     * 悬浮窗权限检测     */    private void checkSuspendedWindowPermission() {        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M                || AppUtils.checkAlertWindowsPermission(this)) {            showTarBarAlertWindows(coreManager.getConfig().getTabBarConfigList.getTabBarImg(), coreManager.getConfig().getTabBarConfigList.getTabBarLinkUrl());        } else {            PermissionDialog.show(this, "悬浮窗权限", "您的手机没有授予悬浮窗权限，请开启后再试", "暂不开启", "现在去开启");        }    }    private void showTarBarAlertWindows(String viewPath, String tabBarLinkUrl) {        if (!ActivityStack.isServiceRunning(this, MainWindowShowService.class.getName())) {            MainAlertWebViewActivity.IS_FLOATING = true;            MainAlertWebViewActivity.FLOATING_WINDOW_URL = tabBarLinkUrl;            Intent intent = new Intent(MainActivity.this, MainWindowShowService.class);            intent.putExtra("isZoom", false);            intent.putExtra("viewPath", viewPath);            startService(intent);        }    }    /**     * 选中     */    public void pressImg() {        if (coreManager.getConfig().getTabBarConfigList == null || TextUtils.isEmpty(coreManager.getConfig().getTabBarConfigList.getTabBarImg1())) {            return;        }        int size = DisplayUtil.dip2px(this, 23);        Glide.with(this)                .load(coreManager.getConfig().getTabBarConfigList.getTabBarImg1())                .diskCacheStrategy(DiskCacheStrategy.RESULT)                .into(new SimpleTarget<GlideDrawable>(size, size) {                    @Override                    public void onResourceReady(GlideDrawable resource, GlideAnimation<? super GlideDrawable> glideAnimation) {                        resource.setBounds(0, 0, size, size);                        mRbTabDiy.setCompoundDrawables(null, resource, null, null);                        //不知道为什么显示不出来//                        StateListDrawable drawable = new StateListDrawable();//                        //  状态  , 设置按下的图片//                        drawable.addState(new int[]{android.R.attr.state_checked, android.R.attr.state_enabled}, img);//                        // 默认状态,默认状态下的图片//                        drawable.addState(new int[]{-android.R.attr.state_checked}, press_img);                    }                });    }    /**     * 默认     */    public void defaultImg() {        if (coreManager.getConfig().getTabBarConfigList == null || TextUtils.isEmpty(coreManager.getConfig().getTabBarConfigList.getTabBarImg())) {            return;        }        int size = DisplayUtil.dip2px(this, 23);        Glide.with(this)                .load(coreManager.getConfig().getTabBarConfigList.getTabBarImg())                .diskCacheStrategy(DiskCacheStrategy.RESULT)                .into(new SimpleTarget<GlideDrawable>(size, size) {                    @Override                    public void onResourceReady(GlideDrawable resource, GlideAnimation<? super GlideDrawable> glideAnimation) {                        resource.setBounds(0, 0, size, size);                        mRbTabDiy.setCompoundDrawables(null, resource, null, null);                    }                });    }    /**     * public为了我的页面点击好友跳转，     */    public void changeTab(int checkedId) {        mRadioGroup.check(checkedId);    }    /**     * 切换Fragment     */    private void changeFragment(int checkedId) {        if (mLastFragmentId == checkedId) {            return;        }        if (checkedId == R.id.diy_tab) {            pressImg();        } else {            defaultImg();        }        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();        Fragment fragment = getSupportFragmentManager().findFragmentByTag(String.valueOf(checkedId));        if (fragment == null) {            switch (checkedId) {                case R.id.rb_tab_1:                    fragment = new MessageFragment();                    break;                case R.id.rb_tab_2:                    if (Constants.SUPPORT_NEW_CONTACT_UI) {                        fragment = new AddressBookFragment();                    } else {                        fragment = new MainFragment();                    }                    break;                case R.id.diy_tab:                    fragment = new DiyFragment2();                    break;                case R.id.rb_tab_3:                    if (coreManager.getConfig().newUi) { // 切换新旧两种ui对应不同的发现页面，                        fragment = new SquareFragment();                    } else {                        fragment = new DiscoverFragment();                    }                    break;                case R.id.rb_tab_4:                    fragment = new MeFragment();                    break;            }        }        assert fragment != null;        if (!fragment.isAdded()) {// 未添加 add            transaction.add(R.id.main_content, fragment, String.valueOf(checkedId));        }        Fragment lastFragment = getSupportFragmentManager().findFragmentByTag(String.valueOf(mLastFragmentId));        if (lastFragment != null) {            transaction.hide(lastFragment);        }        // 以防万一出现last和current都是同一个fragment的情况，先hide再show,        transaction.show(fragment);        // transaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);// 添加动画        transaction.commitNowAllowingStateLoss();        // getSupportFragmentManager().executePendingTransactions();        mLastFragmentId = checkedId;    }    @Subscribe(threadMode = ThreadMode.MainThread)    public void processEventBusMsg(EventBusMsg eventBusMsg) {        if (eventBusMsg.getMessageType() == Constants.EVENTBUS_MSG_ACTION_LOGIN) {            login();        } else if (eventBusMsg.getMessageType() == Constants.EVENTBUS_MSG_ACTION_LOGOUT) {            loginOut();        } else if (eventBusMsg.getMessageType() == Constants.EVENTBUS_MSG_ACTION_CONFLICT) {            conflict();        } else if (eventBusMsg.getMessageType() == Constants.EVENTBUS_MSG_ACTION_LOGIN_GIVE_UP) {            need_update();        } else if (eventBusMsg.getMessageType() == Constants.EVENTBUS_MSG_ACTION_NEED_UPDATE) {            login_give_up();        } else if (eventBusMsg.getMessageType() == Constants.EVENTBUS_GROUP_QRCODE) {            if (!TextUtils.isEmpty(AppConfig.EXTERNAL_TUNING_UP)) {                isSupportForwarded(CommonalityTools.getValueByName(AppConfig.EXTERNAL_TUNING_UP, "roomId"));            }        } else if (eventBusMsg.getMessageType() == Constants.EVENTBUS_TIME_UPDATE) {            checkTime();        } else if (eventBusMsg.getMessageType() == Constants.EVENTBUS_MSG_AUTH_SUCCESS) {            getUpdateRoom();//            getUpdateFriend();        } else if (eventBusMsg.getMessageType() == Constants.EVENTBUS_ROOM_MEMBER_DOWNLOAD_FOR_AVATAR) {            String roomId = (String) eventBusMsg.getObject();            getRoomMemberForAvatar(roomId);        } else if (eventBusMsg.getMessageType() == Constants.EVENTBUS_DISABLE_IP_DEVICE) {            logout();            // 退出时清除设备锁密码，            DeviceLockHelper.clearPassword();            UserSp.getInstance(mContext).clearUserInfo();            MyApplication.getInstance().mUserStatus = LoginHelper.STATUS_USER_SIMPLE_TELPHONE;            XmppConnectionImpl.getInstance().logoutXmpp();            LoginHelper.broadcastLogout(mContext);            ToastUtil.showToast(R.string.current_device_ip_is_disabled);            startActivity(new Intent(MainActivity.this, LoginActivity.class));            finish();        }    }    private void logout() {        HashMap<String, String> params = new HashMap<String, String>();        // 得到电话        String phoneNumber = coreManager.getSelf().getTelephone();        // 去掉区号,        String mobilePrefix = String.valueOf(PreferenceUtils.getInt(MyApplication.getContext(), Constants.AREA_CODE_KEY, 86));        String phoneNumberRel;        if (phoneNumber.startsWith(mobilePrefix)) {            phoneNumberRel = phoneNumber.substring(mobilePrefix.length());        } else {            phoneNumberRel = phoneNumber;        }        String digestTelephone = Md5Util.toMD5(phoneNumberRel);        params.put("telephone", digestTelephone);        params.put("access_token", coreManager.getSelfStatus().accessToken);        // 默认为86        params.put("areaCode", String.valueOf(86));        params.put("deviceKey", "android");        HttpUtils.get().url(coreManager.getConfig().USER_LOGOUT)                .params(params)                .build()                .execute(new BaseCallback<String>(String.class) {                    @Override                    public void onResponse(ObjectResult<String> result) {                    }                    @Override                    public void onError(Call call, Exception e) {                    }                });    }    private void getUpdateRoom() {        HashMap<String, String> params = new HashMap<>();        params.put("access_token", coreManager.getSelfStatus().accessToken);        params.put("type", "0");        params.put("pageIndex", "0");        params.put("pageSize", "1000");// 给一个尽量大的值        HttpUtils.get().url(coreManager.getConfig().ROOM_LIST_HIS)                .params(params)                .build()                .execute(new ListCallback<MucRoom>(MucRoom.class) {                    @Override                    public void onResponse(ArrayResult<MucRoom> result) {                        if (result.getResultCode() == 1 && result.getData() != null) {                            AppExecutors.getInstance().networkIO().execute(new Runnable() {                                @Override                                public void run() {                                    List<MucRoom> mucRooms = new ArrayList<>();                                    for (int i = 0; i < result.getData().size(); i++) {                                        MucRoom mucRoom = result.getData().get(i);                                        boolean b = FriendDao.getInstance().queryFriendByFriendId(coreManager.getSelf().getUserId(), mucRoom.getJid());                                        if (!b) {                                            mucRooms.add(mucRoom);                                        }                                    }                                    for (int i = 0; i < mucRooms.size(); i++) {                                        MucRoom mucRoom = mucRooms.get(i);                                        EventBus.getDefault().post(new EventCreateGroupFriend(mucRoom));                                    }                                    MsgBroadcast.broadcastMsgUiUpdate(MyApplication.getContext());                                }                            });                        }                    }                    @Override                    public void onError(Call call, Exception e) {                    }                });    }    public void getUpdateFriend() {        HashMap<String, String> params = new HashMap<>();        params.put("access_token", coreManager.getSelfStatus().accessToken);        HttpUtils.get().url(coreManager.getConfig().FRIENDS_ATTENTION_LIST)                .params(params)                .build()                .execute(new ListCallback<AttentionUser>(AttentionUser.class) {                    @Override                    public void onResponse(ArrayResult<AttentionUser> result) {                        if (result.getResultCode() == 1 && result.getData() != null) {                            AppExecutors.getInstance().diskIO().execute(new Runnable() {                                @Override                                public void run() {                                    try {                                        FriendDao.getInstance().addFriends(coreManager.getSelf().getUserId(), result.getData(), new OnCompleteListener2() {                                            @Override                                            public void onLoading(int progressRate, int sum) {                                            }                                            @Override                                            public void onCompleted() {                                                EventBusMsg eventBusMsg = new EventBusMsg();                                                eventBusMsg.setMessageType(Constants.EVENTBUS_FRIEND_DOWNLOAD_REFRESH_UI);                                                EventBus.getDefault().post(eventBusMsg);                                            }                                        });                                    } catch (Exception e) {                                    }                                }                            });                        } else {                        }                    }                    @Override                    public void onError(Call call, Exception e) {                    }                });    }    private void getRoomMemberForAvatar(String roomId) {        Map<String, String> params = new HashMap<>();        params.put("access_token", coreManager.getSelfStatus().accessToken);        params.put("roomId", roomId);        params.put("pageSize", 9 + "");        HttpUtils.get().url(coreManager.getConfig().ROOM_GET)                .params(params)                .build()                .execute(new BaseCallback<MucRoom>(MucRoom.class) {                             @Override                             public void onResponse(ObjectResult<MucRoom> result) {// 数据结果与room/get接口一样，只是服务端没有返回群成员列表的数据                                 if (result.getResultCode() == 1 && result.getData() != null) {                                     MucRoom room = result.getData();                                     if (room.getMember() != null) {// 被踢出该群组                                         AppExecutors.getInstance().diskIO().execute(new Runnable() {                                             @Override                                             public void run() {                                                 int temp = room.getMembers().size();                                                 int size = temp >= 9 ? 9 : temp;                                                 for (int m = 0; m < size; m++) {// 在异步任务内存储                                                     MucRoomMember mucRoomMember = room.getMembers().get(m);                                                     if (mucRoomMember == null) {                                                         continue;                                                     }                                                     RoomMember roomMember = new RoomMember();                                                     if (mucRoomMember.getOnLineState() == 0) {                                                         roomMember.setLastOnLineTime(mucRoomMember.getOfflineTime());                                                     } else {                                                         //在线                                                         roomMember.setLastOnLineTime(0);                                                     }                                                     roomMember.setVipLevel(mucRoomMember.getVip());                                                     roomMember.setRoomId(room.getId());                                                     roomMember.setUserId(mucRoomMember.getUserId());                                                     roomMember.setUserName(mucRoomMember.getNickName());                                                     if (TextUtils.isEmpty(mucRoomMember.getRemarkName())) {                                                         roomMember.setCardName(mucRoomMember.getNickName());                                                     } else {                                                         roomMember.setCardName(mucRoomMember.getRemarkName());                                                     }                                                     roomMember.setTalkTime(mucRoomMember.getTalkTime());                                                     roomMember.setRole(mucRoomMember.getRole());                                                     roomMember.setCreateTime(mucRoomMember.getCreateTime());                                                     RoomMemberDao.getInstance().saveSingleRoomMember(room.getId(), roomMember);                                                 }                                                 EventBusMsg eventBusMsg = new EventBusMsg();                                                 eventBusMsg.setMessageType(Constants.EVENTBUS_ROOM_MEMBER_DOWNLOAD_REFRESH_UI);                                                 EventBus.getDefault().post(eventBusMsg);                                             }                                         });                                     }                                 }                             }                             @Override                             public void onError(Call call, Exception e) {                             }                         }                );    }    @Subscribe(threadMode = ThreadMode.BackgroundThread)    public void processEventBusMsgBackground(EventBusMsg eventBusMsg) {        if (eventBusMsg.getMessageType() == Constants.EVENTBUS_MSG_CURRENT_USER_INFO_UPDATE) {            downloadUserInfo();        }    }    @Subscribe(threadMode = ThreadMode.BackgroundThread)    public void eventBusMonitorBean(MonitorBean monitorBean) {        if (monitorBean != null && !TextUtils.isEmpty(monitorBean.getPath())) {            List<String> pathList = new ArrayList<>();            pathList.add(monitorBean.getPath());            OBSUtils.uploadFileListLog(pathList, null, new OBSUtils.ObsErrorListener() {                @Override                public void error(String msg) {                }            }, new OBSUtils.UploadListener() {                @Override                public void progress(int progress) {                }            }, MainActivity.this, coreManager);        }    }    /**     * 下载个人基本资料     */    private void downloadUserInfo() {        HashMap<String, String> params = new HashMap<>();        params.put("access_token", coreManager.getSelfStatus().accessToken);        HttpUtils.get().url(coreManager.getConfig().USER_GET_URL)                .params(params)                .build()                .execute(new BaseCallback<User>(User.class) {                    @Override                    public void onResponse(ObjectResult<User> result) {                        boolean updateSuccess = false;                        if (result.getResultCode() == 1) {                            User user = result.getData();                            updateSuccess = UserDao.getInstance().updateByUser(user);                            // 设置登陆用户信息                            if (updateSuccess) {                                // 如果成功，保存User变量，                                coreManager.setSelf(user);                                EventBusMsg eventBusMessage = new EventBusMsg();                                eventBusMessage.setMessageType(Constants.EVENTBUS_MSG_CURRENT_USER_INFO_UPDATE_UI);                                EventBus.getDefault().post(eventBusMessage);                            }                            PreferenceUtils.putInt(MyApplication.getInstance(), MyApplication.getLoginUserId() + "_" + Constants.IS_FRIEND_ADD, user.getIsAddFirend());//                            PreferenceUtils.putInt(MyApplication.getInstance(), MyApplication.getLoginUserId() + "_" + Constants.IS_FRIEND_ADD, 1);                            PreferenceUtils.putInt(MyApplication.getInstance(), MyApplication.getLoginUserId() + "_" + Constants.IS_CREATE_ROOM, user.getIsCreateRoom());//                            PreferenceUtils.putInt(MyApplication.getInstance(), MyApplication.getLoginUserId() + "_" + Constants.IS_CREATE_ROOM, 1);                        }                    }                    @Override                    public void onError(Call call, Exception e) {                    }                });    }    /**     * 登录方法     */    public void login() {        Log.d(TAG, "login() called");        User user = coreManager.getSelf();        ImHelper.checkXmppAuthenticated();        mUserId = user.getUserId();        numMessage = FriendDao.getInstance().getMsgUnReadNumTotal(mUserId);        numCircle = MyZanDao.getInstance().getZanSize(coreManager.getSelf().getUserId());        updateNumData();        if (isCreate) {            mRbTab1.toggle();        }    }    /* 当注销当前用户时，将那些需要当前用户的Fragment销毁，以后重新登陆后，重新加载为初始状态 */    // TODO: 做废了，下线统一清activity栈，    public void removeNeedUserFragment(boolean startAgain) {        mRadioGroup.clearCheck();        mLastFragmentId = -1;        isCreate = true;    }    /**     * 登出方法     */    // TODO: 做废了，下线统一清activity栈，    public void loginOut() {        Log.d(TAG, "loginOut() called");        cancelUserCheckIfExist();        finish();    }    // TODO: 做废了，下线统一清activity栈，    public void conflict() {        Log.d(TAG, "conflict() called");        PreferenceUtils.putBoolean(mContext, AppConstant.LOGINSTATU, false);        isConflict = true;// 标记一下        LogUtils.e("mUserStatus", "conflict xxx");        MyApplication.getInstance().mUserStatus = LoginHelper.STATUS_USER_TOKEN_CHANGE;        removeNeedUserFragment(false);        cancelUserCheckIfExist();        // 弹出对话框        UserCheckedActivity.start(this);        if (mActivityManager == null) {            mActivityManager = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);        }        mActivityManager.moveTaskToFront(getTaskId(), ActivityManager.MOVE_TASK_NO_USER_ACTION);        finish();    }    public void need_update() {        Log.d(TAG, "need_update() called");        XmppConnectionImpl.getInstance().logoutXmpp();        removeNeedUserFragment(false);        cancelUserCheckIfExist();        // 弹出对话框        com.iimm.miliao.ui.UserCheckedActivity.start(this);    }    public void login_give_up() {        Log.d(TAG, "login_give_up() called");        XmppConnectionImpl.getInstance().logoutXmpp();        cancelUserCheckIfExist();        MyApplication.getInstance().mUserStatus = LoginHelper.STATUS_USER_NO_UPDATE;    }    private void showDeviceLock() {        if (DeviceLockHelper.isLocked()) {            // 有开启设备锁，            DeviceLockActivity.start(this);        } else {            Log.e("DeviceLock", "没开启设备锁，不弹出设备锁");        }    }    @Subscribe(threadMode = ThreadMode.MainThread)    public void helloEventBus(MessageSendChat message) {        if (!message.isGroup) {            ImHelper.sendChatMessage(message.toUserId, message.chat);        } else {            ImHelper.sendMucChatMessage(message.toUserId, message.chat);        }    }    // 更新发现模块新消息数量    @Subscribe(threadMode = ThreadMode.MainThread)    public void helloEventBus(MessageEventHongdian message) {        numCircle = message.number;        UiUtils.updateNum(mTvCircleNum, numCircle);    }    // 已上传的联系人注册了IM,更新到联系人表内    @Subscribe(threadMode = ThreadMode.MainThread)    public void helloEventBus(MessageContactEvent mMessageEvent) {        List<Contact> mNewContactList = ContactDao.getInstance().getContactsByToUserId(coreManager.getSelf().getUserId(),                mMessageEvent.message);        if (mNewContactList != null && mNewContactList.size() > 0) {            updateContactUI(mNewContactList);        }    }    /**     * 我方取消、挂断通话后发送XMPP消息给对方     * copy by AudioOrVideoController     */    @Subscribe(threadMode = ThreadMode.MainThread)    public void helloEventBus(final MessageEventCancelOrHangUp event) {        String mLoginUserId = coreManager.getSelf().getUserId();        ChatMessage message = new ChatMessage();        if (event.type == 103) {          // 取消 语音通话            message.setType(Constants.TYPE_NO_CONNECT_VOICE);        } else if (event.type == 104) {// 取消 视频通话            message.setType(Constants.TYPE_END_CONNECT_VOICE);        } else if (event.type == 113) {// 挂断 语音通话            message.setType(Constants.TYPE_NO_CONNECT_VIDEO);        } else if (event.type == 114) {// 挂断 视频通话            message.setType(Constants.TYPE_END_CONNECT_VIDEO);        }        message.setMySend(true);        message.setFromUserId(mLoginUserId);        message.setFromUserName(coreManager.getSelf().getNickName());        message.setToUserId(event.toUserId);        message.setContent(event.content);        message.setTimeLen(event.callTimeLen);        message.setDoubleTimeSend(TimeUtils.time_current_time_double());        message.setPacketId(ToolUtils.getUUID());        if (ChatMessageDao.getInstance().saveNewSingleChatMessage(mLoginUserId, event.toUserId, message)) {            ListenerManager.getInstance().notifyNewMesssage(mLoginUserId, message.getFromUserId(), message, false);        }        ImHelper.sendChatMessage(event.toUserId, message);        MsgBroadcast.broadcastMsgUiUpdate(mContext);   // 更新消息界面    }    @Subscribe(threadMode = ThreadMode.MainThread)    public void helloEventBus(MessageEventInitiateMeeting message) {        String mLoginUserId = coreManager.getSelf().getUserId();        String mLoginNickName = coreManager.getSelf().getNickName();        Intent intent = new Intent(this, Jitsi_connecting_second.class);        if (message.isAudio) {            intent.putExtra("type", 3);        } else {            intent.putExtra("type", 4);        }        intent.putExtra("fromuserid", mLoginUserId);        intent.putExtra("touserid", mLoginUserId);        startActivity(intent);        for (int i = 0; i < message.list.size(); i++) {            ChatMessage mMeetingMessage = new ChatMessage();            int type;            String str;            if (message.isAudio) {                type = Constants.TYPE_IS_MU_CONNECT_VOICE;                str = getString(R.string.tip_invite_voice_meeting);            } else {                type = Constants.TYPE_IS_MU_CONNECT_VIDEO;                str = getString(R.string.tip_invite_video_meeting);            }            mMeetingMessage.setType(type);            mMeetingMessage.setContent(str);            mMeetingMessage.setFromUserId(mLoginUserId);            mMeetingMessage.setFromUserName(mLoginNickName);            mMeetingMessage.setObjectId(mLoginUserId);            mMeetingMessage.setDoubleTimeSend(TimeUtils.time_current_time_double());            mMeetingMessage.setToUserId(message.list.get(i));            mMeetingMessage.setPacketId(ToolUtils.getUUID());            ImHelper.sendChatMessage(message.list.get(i), mMeetingMessage);            // 音视频会议消息不保存/*            ChatMessageDao.getInstance().saveNewSingleChatMessage(mLoginUserId, message.list.get(i), mMeetingMessage);            FriendDao.getInstance().updateFriendContent(mLoginUserId, message.list.get(i), str, type, TimeUtils.time_current_time());*/        }    }    /*    扫描二维码 || 全部群组内 加入群组时群主开启了群验证 发送入群请求给群主     */    @Subscribe(threadMode = ThreadMode.MainThread)    public void helloEventBus(EventSendVerifyMsg eventSendVerifyMsg) {        String mLoginUserId = coreManager.getSelf().getUserId();        String mLoginUserName = coreManager.getSelf().getNickName();        ChatMessage message = new ChatMessage();        message.setType(Constants.TYPE_GROUP_VERIFY);        message.setFromUserId(mLoginUserId);        message.setToUserId(eventSendVerifyMsg.getCreateUserId());        message.setFromUserName(mLoginUserName);        message.setIsEncrypt(0);        String s = JsonUtils.initJsonContent(mLoginUserId, mLoginUserName, eventSendVerifyMsg.getGroupJid(), "1", eventSendVerifyMsg.getReason());        message.setObjectId(s);        message.setPacketId(ToolUtils.getUUID());        message.setDoubleTimeSend(TimeUtils.time_current_time_double());        ImHelper.sendChatMessage(eventSendVerifyMsg.getCreateUserId(), message);    }    @Subscribe(threadMode = ThreadMode.MainThread)    public void helloEventBus(MessageEventBG mMessageEventBG) {        if (mMessageEventBG.flag) {// 切换到前台            //启动悬浮申请            if (Constants.SUPPORT_FLOATING_WINDOW&&coreManager.getConfig().getTabBarConfigList!=null&&!TextUtils.isEmpty(coreManager.getConfig().getTabBarConfigList.getTabBarLinkUrl())){                if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M                        || AppUtils.checkAlertWindowsPermission(this)) {                    showTarBarAlertWindows(coreManager.getConfig().getTabBarConfigList.getTabBarImg(), coreManager.getConfig().getTabBarConfigList.getTabBarLinkUrl());                }                WindowUtil.getInstance().show();            }            // 设备锁，            showDeviceLock();            // 清除通知栏消息            NotificationManager mNotificationManager = (NotificationManager) this.getSystemService(Context.NOTIFICATION_SERVICE);            if (mNotificationManager != null) {                mNotificationManager.cancelAll();            }            if (isConflict) {// 在其他设备登录了，不登录                isConflict = false;// Reset Status                Log.e(TAG, "在其他设备登录了，不登录");                return;            }            LogUtils.i(TAG, "helloEventBus ImHelper.isAuthenticated(): " + ImHelper.isAuthenticated());            if (!ImHelper.checkXmppAuthenticated()) {// XMPP未验证                // 在集群模式下，(ex:端口改为5333)，当xmpp掉线后有一定概率连接不上                CountDownTimer mCountDownTimer = new CountDownTimer(6000, 1000) {                    @Override                    public void onTick(long millisUntilFinished) {                    }                    @Override                    public void onFinish() {                        LogUtils.i(TAG, "helloEventBus onFinish ImHelper.isAuthenticated(): " + ImHelper.isAuthenticated());                    }                };                mCountDownTimer.start();            } else {                LogUtils.i(TAG, "XMPP已认证");            }        } else {// XMPP连接关闭 || 异常断开           /* MachineDao.getInstance().resetMachineStatus();            MyApplication.getInstance().appBackstage(false);*/            if (Constants.SUPPORT_FLOATING_WINDOW){                WindowUtil.getInstance().hide();                stopService(new Intent(this, MainWindowShowService.class));            }        }    }    /*    扫描二维码 || 全部群组内 加入群组 将群组存入朋友表    */    @Subscribe(threadMode = ThreadMode.PostThread)    public void helloEventBus(EventCreateGroupFriend eventCreateGroupFriend) {        String mLoginUserId = coreManager.getSelf().getUserId();        String mLoginUserName = coreManager.getSelf().getNickName();        MucRoom room = eventCreateGroupFriend.getMucRoom();        MyApplication.getInstance().saveGroupPartStatus(room.getJid(), room.getShowRead(), room.getAllowSendCard(),                room.getAllowConference(), room.getAllowSpeakCourse(), room.getTalkTime());        int temp = room.getMembers().size();        int size = temp >= 9 ? 9 : temp;        for (int m = 0; m < size; m++) {// 在异步任务内存储            MucRoomMember mucRoomMember = room.getMembers().get(m);            if (mucRoomMember == null) {                continue;            }            RoomMember roomMember = new RoomMember();            if (mucRoomMember.getOnLineState() == 0) {                roomMember.setLastOnLineTime(mucRoomMember.getOfflineTime());            } else {                //在线                roomMember.setLastOnLineTime(0);            }            roomMember.setVipLevel(mucRoomMember.getVip());            roomMember.setRoomId(room.getId());            roomMember.setUserId(mucRoomMember.getUserId());            roomMember.setUserName(mucRoomMember.getNickName());            if (TextUtils.isEmpty(mucRoomMember.getRemarkName())) {                roomMember.setCardName(mucRoomMember.getNickName());            } else {                roomMember.setCardName(mucRoomMember.getRemarkName());            }            roomMember.setTalkTime(mucRoomMember.getTalkTime());            roomMember.setRole(mucRoomMember.getRole());            roomMember.setCreateTime(mucRoomMember.getCreateTime());            RoomMemberDao.getInstance().saveSingleRoomMember(room.getId(), roomMember);        }        Friend friend = new Friend();        friend.setOwnerId(mLoginUserId);        friend.setUserId(room.getJid());        friend.setNickName(room.getName());        friend.setDescription(room.getDesc());        friend.setRoomId(room.getId());        friend.setRoomCreateUserId(room.getUserId());        friend.setChatRecordTimeOut(room.getChatRecordTimeOut());// 消息保存天数 -1/0 永久        friend.setContent(mLoginUserName + " " + InternationalizationHelper.getString("JXMessageObject_GroupChat"));        friend.setTimeSend(TimeUtils.time_current_time());        friend.setRoomFlag(1);        friend.setStatus(Constants.STATUS_FRIEND);        FriendDao.getInstance().createOrUpdateFriend(friend);        Log.i("当前线程", "ThreadMode.BackgroundThread:" + Thread.currentThread().getName());        // 调用smack加入群组的方法        ImHelper.joinMucChat(friend.getUserId(), 0);    }    private boolean shouldInit() {        ActivityManager activityManager = ((ActivityManager) getSystemService(Context.ACTIVITY_SERVICE));        List<ActivityManager.RunningAppProcessInfo> processes = activityManager.getRunningAppProcesses();        String mainProcessName = getPackageName();        int myPid = Process.myPid();        for (ActivityManager.RunningAppProcessInfo info : processes) {            if (info.pid == myPid && mainProcessName.equals(info.processName)) {                return true;            }        }        return false;    }    /**     * 关闭软键盘     */    public void hideInput() {        InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);        IBinder token = getWindow().getDecorView().getWindowToken();        if (imm != null && imm.isActive() && token != null) {            imm.hideSoftInputFromWindow(token, InputMethodManager.HIDE_NOT_ALWAYS);        }    }    /**     * OPPO手机：App的通知默认是关闭的，需要检查通知是否开启     * OPPO手机：App后台时，调用StartActivity方法不起做用，需提示用户至 手机管家-权限隐私-自启动管理 内该App的自启动开启     * <p>     * 小米与魅族手机需要开启锁屏显示权限，否则在锁屏时收到音视频消息来电界面无法弹起（其他手机待测试，华为手机无该权限设置，锁屏时弹起后直接干掉弹起页面）     */    private void checkNotifyStatus() {        int launchCount = PreferenceUtils.getInt(this, Constants.APP_LAUNCH_COUNT, 0);// 记录app启动的次数        Log.e(TAG, "启动app的次数:" + launchCount);        if (launchCount == 1) {            String tip = "";            if (!AppUtils.isNotificationEnabled(this)) {                tip = getString(R.string.title_notification) + "，" + getString(R.string.content_notification);            }            if (DeviceInfoUtil.isOppoRom()) {// 如果Rom为OPPO，还需要提醒用户开启自启动                tip += getString(R.string.open_auto_launcher);            }            if (!TextUtils.isEmpty(tip)) {                SelectionLongFrame dialog = new SelectionLongFrame(this);                dialog.setSomething(null, tip, new SelectionLongFrame.OnSelectionFrameClickListener() {                    @Override                    public void cancelClick() {                    }                    @Override                    public void confirmClick() {                        AndPermissionUtils.setting(MainActivity.this);                    }                });                dialog.show();            }        } else if (launchCount == 2) {            if (DeviceInfoUtil.isMiuiRom() || DeviceInfoUtil.isMeizuRom()) {                SelectionFrame dialog = new SelectionFrame(this);                dialog.setSomething(getString(R.string.open_screen_lock_show),                        getString(R.string.open_screen_lock_show_for_audio), new SelectionFrame.OnSelectionFrameClickListener() {                            @Override                            public void cancelClick() {                            }                            @Override                            public void confirmClick() {                                AndPermissionUtils.setting(MainActivity.this);                            }                        });                dialog.show();            }        }    }    /**     * 手机联系人相关操作     */    private void addressBookOperation() {        AndPermissionUtils.addressbookPermission(this, new OnPermissionClickListener() {            @Override            public void onSuccess() {                try {                    uploadAddressBook();                } catch (Exception e) {                    String message = getString(R.string.tip_read_contacts_failed);                    ToastUtil.showToast(MainActivity.this, message);                    Reporter.post(message, e);                    ContactsUtil.cleanLocalCache(MainActivity.this, coreManager.getSelf().getUserId());                }            }            @Override            public void onFailure(List<String> data) {            }        });    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        if (resultCode == RESULT_OK && requestCode == REQUEST_CODE_INSTALL_PERMISSION) {            installApk();        }        switch (requestCode) {            case 888:                if (resultCode == Activity.RESULT_OK) {                    if (data == null || data.getExtras() == null) {                        return;                    }                    String result = data.getExtras().getString(Constant.EXTRA_RESULT_CONTENT);                    Log.e(TAG, "二维码扫描结果：" + result);                    if (TextUtils.isEmpty(result)) {                        return;                    }                    if (result.length() == 20 && RegexUtils.checkDigit(result)) {                        // 长度为20且 && 纯数字 扫描他人的付款码 弹起收款界面                        Intent intent = new Intent(mContext, PaymentReceiptMoneyActivity.class);                        intent.putExtra("PAYMENT_ORDER", result);                        startActivity(intent);                    } else if (result.contains("userId")                            && result.contains("userName")) {                        // 扫描他人的收款码 弹起付款界面                        Intent intent = new Intent(mContext, ReceiptPayMoneyActivity.class);                        intent.putExtra("RECEIPT_ORDER", result);                        startActivity(intent);                    } else if (result.contains("pub&acc") && result.length() == 26) {                        //进入扫描公众号登陆逻辑中                        Intent intent = new Intent(this, PublicAccountScannerActivity.class);                        intent.putExtra("result", result);                        startActivity(intent);                    } else if (result.contains("pub&open&acc")) {                        //进入扫描公众号登陆逻辑中                        Intent intent = new Intent(this, PublicAccountScannerActivity.class);                        intent.putExtra("result", result);                        startActivity(intent);                    } else if (result.contains("user&login") && result.length() == 30) {                        //Pc端扫码登录                        Intent intent = new Intent(this, PublicAccountScannerActivity.class);                        intent.putExtra("result", result);                        startActivity(intent);                    } else {                        if (result.contains("tigId")) {                            // 二维码                            Map<String, String> map = WebViewActivity.URLRequest(result);                            String action = map.get("action");                            String userId = map.get("tigId");                            if (TextUtils.equals(action, "group")) {                                getRoomInfo(userId);                            } else if (TextUtils.equals(action, "user")) {                                BasicInfoActivity.start(this, userId, BasicInfoActivity.FROM_ADD_TYPE_QRCODE);                            } else {                                Reporter.post("二维码无法识别，<" + result + ">");                                ToastUtil.showToast(this, R.string.unrecognized);                            }                        } else if (!result.contains("tigId")                                && HttpUtil.isURL(result)) {                            // 非二维码  访问其网页                            Intent intent = new Intent(this, WebViewActivity.class);                            intent.putExtra(WebViewActivity.EXTRA_URL, result);                            startActivity(intent);                        } else {                            Reporter.post("二维码无法识别，<" + result + ">");                            ToastUtil.showToast(this, R.string.unrecognized);                        }                    }                }                break;            default:                super.onActivityResult(requestCode, resultCode, data);        }    }    /**     * 获取房间信息     */    private void getRoomInfo(String roomId) {        Friend friend = FriendDao.getInstance().getMucFriendByRoomId(coreManager.getSelf().getUserId(), roomId);        if (friend != null) {            if (friend.getGroupStatus() == 0) {                interMucChat(friend.getUserId(), friend.getNickName());                return;            } else {// 已被踢出该群组 || 群组已被解散 || 群组已被后台锁定                FriendDao.getInstance().deleteFriend(coreManager.getSelf().getUserId(), friend.getUserId());                ChatMessageDao.getInstance().deleteMessageTable(coreManager.getSelf().getUserId(), friend.getUserId());            }        }        Map<String, String> params = new HashMap<>();        params.put("access_token", coreManager.getSelfStatus().accessToken);        params.put("roomId", roomId);        HttpUtils.get().url(coreManager.getConfig().ROOM_GET)                .params(params)                .build()                .execute(new BaseCallback<MucRoom>(MucRoom.class) {                    @Override                    public void onResponse(ObjectResult<MucRoom> result) {                        if (result.getResultCode() == 1 && result.getData() != null) {                            final MucRoom mucRoom = result.getData();                            if (mucRoom.getIsNeedVerify() == 1) {                                VerifyDialog verifyDialog = new VerifyDialog(MainActivity.this);                                verifyDialog.setVerifyClickListener(MyApplication.getInstance().getString(R.string.tip_reason_invite_friends), new VerifyDialog.VerifyClickListener() {                                    @Override                                    public void cancel() {                                    }                                    @Override                                    public void send(String str) {                                        EventBus.getDefault().post(new EventSendVerifyMsg(mucRoom.getUserId(), mucRoom.getJid(), str));                                    }                                });                                verifyDialog.show();                                return;                            }                            joinRoom(mucRoom, coreManager.getSelf().getUserId());                        } else {                            ToastUtil.showToast(MainActivity.this, TextUtils.isEmpty(result.getResultMsg()) ? getResources().getString(R.string.failed_to_enter_group_chat) : result.getResultMsg());                        }                    }                    @Override                    public void onError(Call call, Exception e) {                        ToastUtil.showToast(MainActivity.this, R.string.get_room_info_error_room_nothing);                    }                });    }    /**     * 加入房间     */    private void joinRoom(final MucRoom room, final String loginUserId) {        DialogHelper.showDefaulteMessageProgressDialog(MainActivity.this);        Map<String, String> params = new HashMap<>();        params.put("access_token", coreManager.getSelfStatus().accessToken);        params.put("roomId", room.getId());        if (room.getUserId().equals(loginUserId))            params.put("type", "1");        else            params.put("type", "2");        MyApplication.mRoomKeyLastCreate = room.getJid();        HttpUtils.get().url(coreManager.getConfig().ROOM_JOIN)                .params(params)                .build()                .execute(new BaseCallback<Void>(Void.class) {                    @Override                    public void onResponse(ObjectResult<Void> result) {                        DialogHelper.dismissProgressDialog();                        if (Result.checkSuccess(MainActivity.this, result)) {                            EventBus.getDefault().post(new EventCreateGroupFriend(room));                            mUserCheckHander.postDelayed(new Runnable() {                                @Override                                public void run() {// 给500ms的时间缓存，防止群组还未创建好就进入群聊天界面                                    interMucChat(room.getJid(), room.getName());                                }                            }, 500);                        } else {                            MyApplication.mRoomKeyLastCreate = "compatible";                        }                    }                    @Override                    public void onError(Call call, Exception e) {                        DialogHelper.dismissProgressDialog();                        ToastUtil.showErrorNet(MainActivity.this);                        MyApplication.mRoomKeyLastCreate = "compatible";                    }                });    }    /**     * 进入房间     */    private void interMucChat(String roomJid, String roomName) {        Intent intent = new Intent(MainActivity.this, MucChatActivity.class);        intent.putExtra(AppConstant.EXTRA_USER_ID, roomJid);        intent.putExtra(AppConstant.EXTRA_NICK_NAME, roomName);        intent.putExtra(AppConstant.EXTRA_IS_GROUP_CHAT, true);        startActivity(intent);        MucgroupUpdateUtil.broadcastUpdateUi(MainActivity.this);    }    private void uploadAddressBook() {        List<Contacts> mNewAdditionContacts = ContactsUtil.getNewAdditionContacts(this, coreManager.getSelf().getUserId());        /**         * 本地生成         * [{"name":"15768779999","telephone":"8615768779999"},{"name":"好搜卡","telephone":"8615720966659"},         * {"name":"zas","telephone":"8613000000000"},{"name":"客服助手","telephone":"864007883333"},]         * 服务端要求         * [{\"toTelephone\":\"15217009762\",\"toRemarkName\":\"我是电话号码备注\"},{\"toTelephone\":\"15217009762\",\"toRemarkName\":\"我是电话号码备注\"}]         */        if (mNewAdditionContacts.size() <= 0) {            return;        }        String step1 = JSON.toJSONString(mNewAdditionContacts);        String step2 = step1.replaceAll("name", "toRemarkName");        String contactsListStr = step2.replaceAll("telephone", "toTelephone");        Log.e("contact", "新添加的联系人：" + contactsListStr);        Map<String, String> params = new HashMap<>();        params.put("access_token", coreManager.getSelfStatus().accessToken);        params.put("uploadJsonStr", contactsListStr);        HttpUtils.post().url(coreManager.getConfig().ADDRESSBOOK_UPLOAD)                .params(params)                .build()                .execute(new ListCallback<Contact>(Contact.class) {                    @Override                    public void onResponse(ArrayResult<Contact> result) {                        if (result.getResultCode() == 1 && result.getData() != null) {                            List<Contact> mContactList = result.getData();                            for (int i = 0; i < mContactList.size(); i++) {                                Contact contact = mContactList.get(i);                                if (ContactDao.getInstance().createContact(contact)) {                                    if (contact.getStatus() == 1) {// 服务端自动成为好友，本地也需要添加                                        NewFriendDao.getInstance().addFriendOperating(contact.getToUserId(), contact.getToUserName(), contact.getToRemarkName());                                    }                                }                            }                            if (mContactList.size() > 0) {// 显示数量新增数量  记录新增contacts id                                updateContactUI(mContactList);                            }                        }                    }                    @Override                    public void onError(Call call, Exception e) {                    }                });    }    private void updateRoom() {        HashMap<String, String> params = new HashMap<>();        params.put("access_token", coreManager.getSelfStatus().accessToken);        params.put("type", "0");        params.put("pageIndex", "0");        params.put("pageSize", "1000");// 给一个尽量大的值        HttpUtils.get().url(coreManager.getConfig().ROOM_LIST_HIS)                .params(params)                .build()                .execute(new ListCallback<MucRoom>(MucRoom.class) {                    @Override                    public void onResponse(ArrayResult<MucRoom> result) {                        if (result.getResultCode() == 1) {                            FriendDao.getInstance().reset(mHandler, coreManager.getSelf().getUserId(), result.getData(), new OnCompleteUpdateListener() {                                @Override                                public void onLoading(int progressRate, int sum) {                                }                                @Override                                public void onCompleted() {                                    if (ImHelper.checkXmppAuthenticated()) {                                        AppExecutors.getInstance().networkIO().execute(new Runnable() {                                            @Override                                            public void run() {                                                // 1.调用smack内join方法加入群组                                                List<Friend> mFriends = FriendDao.getInstance().getAllRooms(coreManager.getSelf().getUserId());                                                for (int i = 0; i < mFriends.size(); i++) {// 已加入的群组不会重复加入，方法内已去重                                                    Friend friend = mFriends.get(i);                                                    ImHelper.joinMucChat(friend.getUserId(),                                                            friend.getTimeSend());                                                }                                                MsgBroadcast.broadcastMsgUiUpdate(MainActivity.this);                                            }                                        });                                    }                                }                                @Override                                public void update() {                                }                            });                        }                    }                    @Override                    public void onError(Call call, Exception e) {                    }                });    }    /*    消息 发现     */    public void msg_num_update(int operation, int count) {        numMessage = (operation == MsgBroadcast.NUM_ADD) ? numMessage + count : numMessage - count;        updateNumData();    }    public void msg_num_reset() {        numMessage = FriendDao.getInstance().getMsgUnReadNumTotal(mUserId);        numCircle = MyZanDao.getInstance().getZanSize(coreManager.getSelf().getUserId());        updateNumData();    }    public void updateNumData() {        numMessage = FriendDao.getInstance().getMsgUnReadNumTotal(mUserId);        numCircle = MyZanDao.getInstance().getZanSize(coreManager.getSelf().getUserId());        ShortcutBadger.applyCount(this, numMessage);        UiUtils.updateNum(mTvMessageNum, numMessage);        UiUtils.updateNum(mTvCircleNum, numCircle);    }    /*    通讯录     */    public void updateNewFriendMsgNum(int msgNum) {        PreferenceUtils.putInt(this, Constants.NEW_CONTACTS_NUMBER + coreManager.getSelf().getUserId(),                msgNum);//        int totalNumber = msgNum + mNewContactsNumber;        if (msgNum == 0) {            mTvNewFriendNum.setText("");            mTvNewFriendNum.setVisibility(View.INVISIBLE);        } else {            mTvNewFriendNum.setText(msgNum + "");            mTvNewFriendNum.setVisibility(View.VISIBLE);        }    }    private void updateContactUI(List<Contact> mContactList) {        String mLoginUserId = coreManager.getSelf().getUserId();//        int mContactsNumber = PreferenceUtils.getInt(MainActivity.this, Constants.NEW_CONTACTS_NUMBER + mLoginUserId, 0);//        int mTotalContactsNumber = mContactsNumber + mContactList.size();//        PreferenceUtils.putInt(MainActivity.this, Constants.NEW_CONTACTS_NUMBER + mLoginUserId, mTotalContactsNumber);        updateNewFriendMsgNum(0);        List<String> mNewContactsIds = new ArrayList<>();        for (int i = 0; i < mContactList.size(); i++) {            mNewContactsIds.add(mContactList.get(i).getToUserId());        }        String mContactsIds = PreferenceUtils.getString(MainActivity.this, Constants.NEW_CONTACTS_IDS + mLoginUserId);        List<String> ids = JSON.parseArray(mContactsIds, String.class);        if (ids != null && ids.size() > 0) {            mNewContactsIds.addAll(ids);        }        PreferenceUtils.putString(MainActivity.this, Constants.NEW_CONTACTS_IDS + mLoginUserId, JSON.toJSONString(mNewContactsIds));    }    // 服务器上与该人的聊天记录也需要删除    private void emptyServerMessage(String friendId) {        Map<String, String> params = new HashMap<>();        params.put("access_token", coreManager.getSelfStatus().accessToken);        params.put("type", String.valueOf(0));// 0 清空单人 1 清空所有        params.put("toUserId", friendId);        HttpUtils.get().url(coreManager.getConfig().EMPTY_SERVER_MESSAGE)                .params(params)                .build()                .execute(new BaseCallback<Void>(Void.class) {                    @Override                    public void onResponse(ObjectResult<Void> result) {                    }                    @Override                    public void onError(Call call, Exception e) {                    }                });    }    private class My_BroadcastReceiver extends BroadcastReceiver {        @Override        public void onReceive(Context context, Intent intent) {            String action = intent.getAction();            if (TextUtils.isEmpty(action)) {                return;            }            if (action.equals(Constants.UPDATE_ROOM)) {                updateRoom();            } else if (action.equals(Constants.PING_FAILED)) {                ImHelper.checkXmppAuthenticated();            } else if (action.equals(Constants.CLOSED_ON_ERROR_END_DOCUMENT)) {                Constants.IS_CLOSED_ON_ERROR_END_DOCUMENT = true;// 将该标志位置为true，这样当CoreService调用init()方法时，才用调用init()方法内的release(将所有xmpp有关对象清空重构)                ImHelper.checkXmppAuthenticated();            } else if (action.equals(OtherBroadcast.SYNC_CLEAN_CHAT_HISTORY)) {                String friendId = intent.getStringExtra(AppConstant.EXTRA_USER_ID);                emptyServerMessage(friendId);                FriendDao.getInstance().resetFriendMessage(coreManager.getSelf().getUserId(), friendId);                ChatMessageDao.getInstance().deleteMessageTable(coreManager.getSelf().getUserId(), friendId);                sendBroadcast(new Intent(Constants.CHAT_HISTORY_EMPTY));// 清空聊天界面                MsgBroadcast.broadcastMsgUiUpdate(mContext);            } else if (action.equals(OtherBroadcast.SEND_MULTI_NOTIFY)) {                mRbTab4.setChecked(false);                mRbTab1.setChecked(true);            } else if (action.equals(OtherBroadcast.FINISH_MAIN)) {                finish();            }        }    }    private String fileDirectoryPath = FileUtil.getFileDir();    public String apkFilePath;    private static final int DOWN_UPDATE = 1;    private static final int DOWN_OVER = 2;    private static final String PACKAGE_URL_SCHEME = "package:";    UpdateManger.updateListener mUpdateListener;    // 下载安装包的网络路径    private String apkUrl;    private String localApkUrl;    private Dialog noticeDialog;// 提示有软件更新的对话框    private Dialog downloadDialog;// 下载对话框    // 进度条与通知UI刷新的handler和msg常量    private ProgressBar mProgress;    private int progress;// 当前进度    private static final int REQUEST_CODE_INSTALL_PERMISSION = 1124;    private Thread downLoadThread; // 下载线程    private boolean interceptFlag = false;// 用户取消下载    // 通知处理刷新界面的handler    private Handler handler = new Handler() {        @SuppressLint("HandlerLeak")        @Override        public void handleMessage(Message msg) {            switch (msg.what) {                case DOWN_UPDATE:                    mProgress.setProgress(progress);                    break;                case DOWN_OVER:                    if (downloadDialog != null && downloadDialog.isShowing()) {                        downloadDialog.dismiss();                    }                    downloadDialog = null;                    if (noticeDialog != null && noticeDialog.isShowing()) {                        noticeDialog.dismiss();                    }                    noticeDialog = null;                    installApk();                    break;            }            super.handleMessage(msg);        }    };    private Runnable mdownApkRunnable = new Runnable() {        @Override        public void run() {            try {                OkHttpClient client = new OkHttpClient.Builder()                        .followRedirects(true)                        .followSslRedirects(true)                        .build();                Request request = new Request.Builder()                        .url(apkUrl)                        .build();                Response response = client.newCall(request)                        .execute();                response.body().contentLength();                long length = response.body().contentLength();                InputStream ins = response.body().byteStream();                File file = new File(fileDirectoryPath);                if (!file.exists()) {                    file.mkdir();                }                File ApkFile = new File(apkFilePath);                FileOutputStream outStream = new FileOutputStream(ApkFile);                int count = 0;                byte buf[] = new byte[1024];                do {                    int numread = ins.read(buf);                    count += numread;                    progress = (int) (((float) count / length) * 100);                    // 下载进度                    handler.sendEmptyMessage(DOWN_UPDATE);                    if (numread <= 0) {                        // 下载完成通知安装                        handler.sendEmptyMessage(DOWN_OVER);                        break;                    }                    outStream.write(buf, 0, numread);                } while (!interceptFlag);// 点击取消停止下载                outStream.close();                ins.close();            } catch (Exception e) {                Reporter.unreachable(e);                callNoUpdate();            }        }    };    /**     * 获取版本信息     */    private void getNewVersion() {        Map<String, String> params = new HashMap<>();        params.put("access_token", coreManager.getSelfStatus().accessToken);        params.put("appType", Constants.DEVICE_ANDROID);        HttpUtils.get().url(coreManager.getConfig().GET_NEW_VERSION)                .params(params)                .build()                .execute(new BaseCallback<VersionInfo>(VersionInfo.class) { //获取通证成功                    @Override                    public void onResponse(ObjectResult<VersionInfo> result) {                        if (result.getResultCode() == Result.CODE_SUCCESS && result.getData() != null) {                            checkUpdate(result.getData());                        }                    }                    @Override                    public void onError(Call call, Exception e) {                    }                });    }    public void checkUpdate(VersionInfo versionInfo) {        if (!TextUtils.isEmpty(versionInfo.getDownloadUrl())) {            apkUrl = versionInfo.getDownloadUrl();        } else if (!TextUtils.isEmpty(versionInfo.getApkLoadUrl())) {            apkUrl = versionInfo.getApkLoadUrl();        }        localApkUrl = versionInfo.getThirdLoadURL();        if (versionInfo == null || versionInfo.getVersionNum() == 0 || (TextUtils.isEmpty(apkUrl) && TextUtils.isEmpty(localApkUrl))) {            // 服务器没有配置新版本，            return;        }        try {            checkUpdateInfo(versionInfo);        } catch (Throwable t) {            // 无论如何不能因为这个崩溃，            Reporter.post("检查更新失败，", t);        }    }    // 显示更新程序对话框，供主程序调用    public void checkUpdateInfo(VersionInfo versionInfo) {//添加检查服务器更新的代码        PackageManager mPackageManager = getPackageManager();        PackageInfo packageInfo = null;        try {            packageInfo = mPackageManager.getPackageInfo(getPackageName(), 0);        } catch (PackageManager.NameNotFoundException e) {            Reporter.unreachable(e);            callNoUpdate();            return;        }        int versionCode = packageInfo.versionCode;        int serverVersionCode = 0;        try {            serverVersionCode = versionInfo.getVersionNum();            if (serverVersionCode <= versionCode) {// 版本号不低 不需要更新                callNoUpdate();            } else {                showNoticeDialog(versionInfo);            }        } catch (Exception e) {        }    }    private String getStringById(int sid) {        return MyApplication.getContext().getString(sid);    }    private void callNoUpdate() {        if (mUpdateListener != null) {            handler.post(() -> {                if (mUpdateListener != null) {                    mUpdateListener.noUpdate();                    // 确保只调用一次，                    mUpdateListener = null;                }            });        }    }    private void showNoticeDialog(VersionInfo versionInfo) {        String content = getStringById(R.string.application_version_update_down);        if (!TextUtils.isEmpty(versionInfo.getUpdateContent())) {            content = versionInfo.getUpdateContent();        }        android.app.AlertDialog.Builder builder = new android.app.AlertDialog.Builder(                this);// Builder，可以通过此builder设置改变AleartDialog的默认的主题样式及属性相关信息        builder.setTitle(getStringById(R.string.application_update));        // 提示消息        String updateMsg = MyApplication.getContext().getString(R.string.new_apk_download);        if (TextUtils.isEmpty(content)) {            builder.setMessage(updateMsg);        } else {            builder.setMessage(content);        }        if (!TextUtils.isEmpty(apkUrl)) {            builder.setPositiveButton(MyApplication.getContext().getString(R.string.download), new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    dialog.dismiss();// 当取消对话框后进行操作一定的代码？取消对话框                    try {                        showDownloadDialog(versionInfo);                    } catch (Throwable t) {                        Reporter.unreachable(t);                        callNoUpdate();                    }                }            });        }        if (!TextUtils.isEmpty(localApkUrl)) {            builder.setNeutralButton(MyApplication.getContext().getString(R.string.local_download), new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface arg0, int arg1) {                    try {                        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(localApkUrl));                        startActivity(intent);                    } catch (Exception e) {                        // 无论如何不能在这里崩溃，                        // 比如手机没有浏览器，                        Reporter.unreachable(e);                    }                }            });        }        if (versionInfo.getForceStatus() == Constants.UPDATE_FORCE) {        } else {            builder.setNegativeButton(MyApplication.getContext().getString(R.string.cancel), new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    dialog.dismiss();                    noticeDialog = null;                }            });        }        builder.setOnDismissListener(dialog -> {            callNoUpdate();        });        if (noticeDialog == null) {            noticeDialog = builder.create();        }        noticeDialog.setCanceledOnTouchOutside(false);        if (versionInfo.getForceStatus() == Constants.UPDATE_FORCE) {            noticeDialog.setCancelable(false);        }        if ((downloadDialog == null || !downloadDialog.isShowing()) && !noticeDialog.isShowing()) {            noticeDialog.show();        }    }    protected void showDownloadDialog(VersionInfo versionInfo) {        android.app.AlertDialog.Builder builder = new android.app.AlertDialog.Builder(mContext);        builder.setTitle(R.string.application_update);        final LayoutInflater inflater = LayoutInflater.from(mContext);        View v = inflater.inflate(R.layout.progress, null);        mProgress = (ProgressBar) v.findViewById(R.id.progress);        builder.setView(v);// 设置对话框的内容为一个View        if (versionInfo.getForceStatus() == Constants.UPDATE_FORCE) {        } else {            builder.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    dialog.dismiss();                    interceptFlag = true;                    callNoUpdate();                }            });        }        if (downloadDialog == null) {            downloadDialog = builder.create();        }        downloadDialog.setCanceledOnTouchOutside(false);        if (versionInfo.getForceStatus() == Constants.UPDATE_FORCE) {            downloadDialog.setCancelable(false);        }        if (!downloadDialog.isShowing()) {            downloadDialog.show();        }        downloadApk(versionInfo);    }    private void downloadApk(VersionInfo versionInfo) {        if (!TextUtils.isEmpty(versionInfo.getDownloadUrl())) {            apkUrl = versionInfo.getDownloadUrl();        } else if (!TextUtils.isEmpty(versionInfo.getApkLoadUrl())) {            apkUrl = versionInfo.getApkLoadUrl();        }        String appName = getPackageName();        String apkVersionName = TimeUtils.getCurrentTime();        if (!TextUtils.isEmpty(versionInfo.getVersionName())) {            apkVersionName = versionInfo.getVersionName();        }        apkFilePath = fileDirectoryPath + appName + apkVersionName + ".apk";        File apkFile = new File(apkFilePath);        if (apkFile.exists()) {            apkFile.delete();        }        if (downLoadThread == null) {            downLoadThread = new Thread(mdownApkRunnable);        }        if (!downLoadThread.isAlive()) {            downLoadThread.start();        }    }    protected void installApk() {        openAPKFile(this, apkFilePath);    }    /**     * 打开安装包     */    public void openAPKFile(Context ctx, String fileUri) {        if (null != fileUri) {            try {                Intent intent = new Intent(Intent.ACTION_VIEW);                File apkFile = new File(fileUri);                if (!apkFile.exists()) {                    Reporter.unreachable();                    return;                }                //兼容7.0                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {                    intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);                    Uri contentUri = FileProvider.getUriForFile(ctx.getApplicationContext(), ctx.getPackageName() + Constants.FILE_PROVIDER_AUTHORITY, apkFile);                    intent.setDataAndType(contentUri, "application/vnd.android.package-archive");                    //兼容8.0                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {                        boolean hasInstallPermission = ctx.getPackageManager().canRequestPackageInstalls();                        if (!hasInstallPermission) {                            startInstallPermissionSettingActivity();                        }                    }                } else {                    intent.setDataAndType(Uri.fromFile(apkFile), "application/vnd.android.package-archive");                    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);                }                if (ctx.getPackageManager().queryIntentActivities(intent, 0).size() > 0) {                    ctx.startActivity(intent);                }            } catch (Throwable e) {                Reporter.unreachable(e);            }        }    }    /**     * 跳转到设置-允许安装未知来源-页面     */    @RequiresApi(api = Build.VERSION_CODES.O)    private void startInstallPermissionSettingActivity() {        //这个是8.0新API        Uri packageURI = Uri.parse(PACKAGE_URL_SCHEME + MyApplication.getInstance().getPackageName());        //注意这个是8.0新API        Intent intent = new Intent(Settings.ACTION_MANAGE_UNKNOWN_APP_SOURCES, packageURI);        startActivityForResult(intent, REQUEST_CODE_INSTALL_PERMISSION);    }    /**     * 获取自己在该群组的信息(职位、昵称、禁言时间等)以及群属性     */    private void isSupportForwarded(String roomid) {        Map<String, String> params = new HashMap<>();        params.put("access_token", coreManager.getSelfStatus().accessToken);        params.put("roomId", roomid);        HttpUtils.get().url(coreManager.getConfig().ROOM_GET_ROOM)                .params(params)                .build()                .execute(new BaseCallback<MucRoom>(MucRoom.class) {                             @Override                             public void onResponse(ObjectResult<MucRoom> result) {// 数据结果与room/get接口一样，只是服务端没有返回群成员列表的数据                                 if (result.getResultCode() == 1 && result.getData() != null) {                                     if (result.getData().getMember() == null) {                                         invitation(result.getData());                                     } else {                                         loadMembers(result.getData().getId(), result.getData().getJid(), result.getData().getName());                                     }                                 } else {// 群组已解散                                     ToastUtil.showToast(MainActivity.this, result.getResultMsg());                                 }                             }                             @Override                             public void onError(Call call, Exception e) {                                 ToastUtil.showNetError(mContext);                             }                         }                );    }    /*     * 获得群信息     * */    private void loadMembers(String roomId, String roomJid, String name) {        Map<String, String> params = new HashMap<>();        params.put("access_token", coreManager.getSelfStatus().accessToken);        params.put("roomId", roomId);        params.put("pageSize", Constants.MUC_MEMBER_SIZE);        HttpUtils.get().url(coreManager.getConfig().ROOM_GET)                .params(params)                .build()                .execute(new BaseCallback<MucRoom>(MucRoom.class) {                             @Override                             public void onResponse(ObjectResult<MucRoom> result) {                                 if (result.getResultCode() == 1 && result.getData() != null) {                                     final MucRoom mucRoom = result.getData();                                     List<MucRoom> rooms = new ArrayList<>();                                     rooms.add(mucRoom);                                     FriendDao.getInstance().addRooms(MyApplication.applicationHandler, coreManager.getSelf().getUserId(), rooms, new OnCompleteListener2() {                                         @Override                                         public void onLoading(int progressRate, int sum) {                                         }                                         @Override                                         public void onCompleted() {                                             DialogHelper.dismissProgressDialog();                                             Intent intent = new Intent(MainActivity.this, MucChatActivity.class);                                             intent.putExtra(AppConstant.EXTRA_USER_ID, roomJid);                                             intent.putExtra(AppConstant.EXTRA_NICK_NAME, name);                                             intent.putExtra(AppConstant.EXTRA_IS_GROUP_CHAT, true);                                             startActivity(intent);                                         }                                     });                                 } else {                                     DialogHelper.dismissProgressDialog();                                     ToastUtil.showToast(MainActivity.this, result.getResultMsg());                                 }                             }                             @Override                             public void onError(Call call, Exception e) {                                 DialogHelper.dismissProgressDialog();                                 ToastUtil.showNetError(mContext);                             }                         }                );    }    /*     * 邀请用户     * */    public void invitation(MucRoom mucRoom) {        List<String> inviteIdList = new ArrayList<>();        List<String> inviteNameList = new ArrayList<>();        inviteIdList.add(coreManager.getSelf().getUserId());        inviteNameList.add(coreManager.getSelf().getNickName());        // 因为ios不要这样格式["10004541","10007042"]的字符串,，为了兼容他们，我们需要另外拼接一下        String ids = JSON.toJSONString(inviteIdList); // ["10004541","10007042"]        String names = JSON.toJSONString(inviteNameList); // ["haha","ccc"]        final String ios_ids = ids.substring(1, ids.length() - 1).replace("\"", ""); // 10004541,10007042        final String ios_name = names.substring(1, names.length() - 1).replace("\"", ""); // haha,ccc        boolean isNeedOwnerAllowInviteFriend = mucRoom.getIsNeedVerify() == 1 ? true : false;        if (isNeedOwnerAllowInviteFriend) {// 群主开启了'群聊邀请确认'功能(需要群主确认进群)            if (coreManager.getSelf().getUserId().equals(mucRoom.getUserId())) {// 我为群主，直接邀请                inviteFriend(ids, mucRoom.getId(), mucRoom);            } else {                VerifyDialog verifyDialog = new VerifyDialog(MainActivity.this);                verifyDialog.setVerifyClickListener("", new VerifyDialog.VerifyClickListener() {                    @Override                    public void cancel() {                    }                    @Override                    public void send(String str) {                        // 给群主发送一条单聊消息                        ChatMessage message = new ChatMessage();                        message.setType(Constants.TYPE_GROUP_VERIFY);                        message.setFromUserId(CommonalityTools.getValueByName(AppConfig.EXTERNAL_TUNING_UP, "userId"));                        message.setToUserId(mucRoom.getUserId());                        message.setFromUserName(CommonalityTools.getValueByName(AppConfig.EXTERNAL_TUNING_UP, "nickName"));                        message.setIsEncrypt(0);                        String s = JsonUtils.initJsonContent(ios_ids, ios_name, mucRoom.getJid(), "0", str);                        message.setObjectId(s);                        message.setDoubleTimeSend(TimeUtils.time_current_time_double());                        message.setPacketId(ToolUtils.getUUID());                        ImHelper.sendChatMessage(mucRoom.getUserId(), message);                        ChatMessage cm = message.clone(false);                        cm.setType(Constants.TYPE_TIP);                        cm.setContent(getString(R.string.tip_send_reason_success));                        if (ChatMessageDao.getInstance().saveNewSingleChatMessage(coreManager.getSelf().getUserId(), mucRoom.getJid(), cm)) {                            ListenerManager.getInstance().notifyNewMesssage(coreManager.getSelf().getUserId(), mucRoom.getJid(), cm, true);                        }                    }                });                verifyDialog.show();            }        } else {// 直接邀请            inviteFriend(ids, mucRoom.getId(), mucRoom);        }        AppConfig.EXTERNAL_TUNING_UP = "";    }    /**     * 邀请好友     */    private void inviteFriend(String inviteUsers, String mRoomId, MucRoom mucRoom) {        Map<String, String> params = new HashMap<>();        params.put("access_token", coreManager.getSelfStatus().accessToken);        params.put("roomId", mRoomId);        DialogHelper.showDefaulteMessageProgressDialog(this);        HttpUtils.get().url(coreManager.getConfig().ROOM_JOIN)                .params(params)                .build()                .execute(new BaseCallback<Void>(Void.class) {                    @Override                    public void onResponse(ObjectResult<Void> result) {                        DialogHelper.dismissProgressDialog();                        if (Result.checkSuccess(MainActivity.this, result)) {                            loadMembers(mucRoom.getId(), mucRoom.getJid(), mucRoom.getName());                        }                    }                    @Override                    public void onError(Call call, Exception e) {                        DialogHelper.dismissProgressDialog();                        ToastUtil.showNetError(mContext);                    }                });    }    @Override    protected void onResume() {        super.onResume();        if (noticeDialog != null) {            getNewVersion();        }    }}